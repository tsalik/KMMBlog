# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the trunk branch
  push:
    paths-ignore:
      - 'docs/**'
      - '*.md'
    branches: [ trunk ]
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'
    branches: [ trunk ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        os: [ macOS-latest ]
        job: [ instrumentation, test ]
        xcode: ["12.4"]
        platform: ["iOS"]
        
    runs-on: ${{matrix.os}}
    
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Cache gradle
        uses: actions/cache@v2.1.0
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Cache DerivedData
        uses: actions/cache@v2.1.0
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-${{ matrix.platform }}_derived_data-xcode_${{ matrix.xcode }}
      
      - name: Build and run tests
        if: matrix.job == 'test'
        run: |
          ./gradlew build
      
      - name: Run Android instrumentation test
        if: matrix.job == 'instrumentation'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew :androidApp:connectedAndroidTest

      - name: iOS build setup
        if: matrix.job == 'instrumentation'
        run: |
          xcodebuild build-for-testing -scheme ReaderEndToEndTests -project iosApp/iosApp.xcodeproj -destination 'platform=iOS Simulator,name=iPhone 12' #-allowProvisioningUpdates

      - name: iOS test iPhone12
        if: matrix.job == 'instrumentation'
        run: |
          echo $GITHUB_WORKSPACE
          run: xcodebuild test-without-building -scheme ReaderEndToEndTests -project -derivedDataPath derivedData iosApp/iosApp.xcodeproj -destination 'platform=iOS Simulator,name=iPhone 12'


          
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.configureondemand=true -Dkotlin.incremental=false -Dorg.gradle.jvmargs="-Xmx4g -Xms128m -XX:MaxPermSize=4096m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:MaxMetaspaceSize=1024m"
